func withUnionPressureLines(minPressure: Float = 0.4.f) -> Geometry {
    if let oldLine = lines.last, let firstLine = lines.first {
        let lp = oldLine.lastPoint, fp = firstLine.firstPoint
        var firstPressure = lp != fp ? minPressure : 1.0.f - firstLine.angle(withPreviousLine: oldLine).f/(.pi)
        return Geometry(lines: lines.enumerated().map { i, line in
            let nextLine = lines[i + 1 < lines.count ? i + 1 : 0]
            let lp = line.lastPoint, fp = nextLine.firstPoint
            let lastPressure = lp != fp ? minPressure : 1.0.f - nextLine.angle(withPreviousLine: line).f/(.pi)
            let pressures = [firstPressure, 1, 1, lastPressure]
            firstPressure = lastPressure
            return line.withPressures(pressures)
        })
    } else {
        return Geometry()
    }
}
func draw(withLineWidth lw: CGFloat, in ctx: CGContext) {
    for (i, line) in lines.enumerated() {
        let nextLine = lines[i + 1 < lines.count ? i + 1 : 0]
        let lp = line.lastPoint, fp = nextLine.firstPoint
        if lp == fp {
            let lastPressure = line.pressures.last ?? 1
            let r = lw*lastPressure.cf/2
            ctx.fillEllipse(in: CGRect(x: fp.x - r, y: fp.y - r, width: r*2, height: r*2))
        }
    }
}
