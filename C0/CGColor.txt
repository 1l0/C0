extension CGColor {
    static func with(hue: CGFloat, saturation: CGFloat, brightness: CGFloat, colorSpaceName: String) -> CGColor {
        let colorSpace = CGColorSpace(name: colorSpaceName as CFString)
        
    }
    
    static func with(hue h: CGFloat, saturation s: CGFloat, brightness v: CGFloat, alpha a: CGFloat = 1.0) -> CGColor {
        let colorSpace = CGColorSpace(name: CGColorSpace.sRGB)!
        if s == 0 {
            return CGColor(colorSpace: colorSpace, components: [v, v, v, a])!
        } else {
            let h6 = 6*h
            let hi = Int(h6)
            let nh = h6 - hi.cf
            switch (hi) {
            case 0:
                return CGColor(colorSpace: colorSpace, components: [v, v*(1 - s*(1 - nh)), v*(1 - s), a])!
            case 1:
                return CGColor(colorSpace: colorSpace, components: [v*(1 - s*nh), v, v*(1 - s), a])!
            case 2:
                return CGColor(colorSpace: colorSpace, components: [v*(1 - s), v, v*(1 - s*(1 - nh)), a])!
            case 3:
                return CGColor(colorSpace: colorSpace, components: [v*(1 - s), v*(1 - s*nh), v, a])!
            case 4:
                return CGColor(colorSpace: colorSpace, components: [v*(1 - s*(1 - nh)), v*(1 - s), v, a])!
            default:
                return CGColor(colorSpace: colorSpace, components: [v, v*(1 - s), v*(1 - s*nh), a])!
            }
        }
    }
}
