final class SpeechView: View, TextViewDelegate {
    weak var sceneView: SceneView!
    var text = Text() {
        didSet {
            if text !== oldValue {
                textView.string = text.string
            }
        }
    }
    private let textView = TextView(frame: CGRect(x: 0, y: 0, width: _timelineWidth, height: _buttonHeight))
    override init(layer: CALayer = CALayer.interfaceLayer()) {
        super.init(layer: layer)
        layer.frame = CGRect(x: 0, y: 0, width: _timelineWidth, height: _buttonHeight)
        textView.delegate = self
        children = [textView]
    }
    func update() {
        text = sceneView.timeline.selectionCutEntity.cut.editGroup.textItem?.text ?? Text()
    }
    
    private var textPack: (oldText: Text, textItem: TextItem)?
    func changeText(textView: TextView, string: String, oldString: String, type: EventSendType) {
//        let ti: TextItem, editGroup = sceneView.timeline.selectionCutEntity.cut.editGroup
        if let textItem = editGroup.textItem {
            ti = textItem
        } else {
            let textItem = TextItem()
            let ts = editGroup.keyframes.map { _ in Text() }
            textItem.texts = ts
            textItem.text = ts[editGroup.editKeyframeIndex]
            _setTextItem(textItem, oldTextItem: editGroup.textItem,  inGroup: editGroup)
            ti = textItem
        }
        switch type {
        case .begin:
            textPack = (ti.text, ti)
            textPack?.textItem.text = Text(string: string)
        case .sending:
            textPack?.textItem.text = Text(string: string)
        case .end:
            if let tp = textPack {
                sceneView.timeline.selectionCutEntity.cut.editGroup.editKeyframeIndex
                if string != oldString {
                    _setText(Text(string: string), oldText: tp.oldText, inTextItem: ti)
                } else {
                    textPack?.textItem.text = Text(string: string)
                }
                textPack = nil
            }
            if ti.isEmpty {
                _setTextItem(nil, oldTextItem: ti, inGroup: editGroup)
            }
        }
        sceneView.cutView.setNeedsDisplay()
    }
    private func _setTextItem(_ textItem: TextItem?, oldTextItem: TextItem?, in group: Group, _ cutEntity: CutEntity) {
        undoManager?.registerUndo(withTarget: self) { $0._setTextItem(oldTextItem, oldTextItem: textItem, in: group, cutEntity) }
        group.textItem = textItem
        cutEntity.isUpdate = true
        sceneView.timeline.setNeedsDisplay()
    }
    private func _setText(_ text: Text, oldText: Text, at i: Int, in group: Group, _ cutEntity: CutEntity) {
        undoManager?.registerUndo(withTarget: self) { $0._setText(oldText, oldText: text, at: i, in: group, cutEntity) }
        group.textItem?.texts[i] = text
        group.textItem?.text = text
        sceneView.cutView.updateViewAffineTransform()
        sceneView.cutView.isUpdate = true
        self.text = text
    }
}
