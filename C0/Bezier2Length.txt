extension Bezier2 {
    func length(withT t: CGFloat) -> CGFloat {
        let xa = 2*(p0.x - 2*p1.x + p2.x), xb = -2*p0.x + 2*p1.x
        let ya = 2*(p0.y - 2*p1.y + p2.y), yb = -2*p0.y + 2*p1.y
        let a = xa*xa + ya*ya, b = 2*(xa*xb + ya*yb), c = xb*xb + yb*yb, d = b*b - 4*a*c
        if d != 0 {
            let s1 = 2*sqrt(a*c) + b, s2 = 2*sqrt(a*(t*(a*t + b) + c)) + 2*a*t + b
            return (s2*s2 - s1*s1 - d*(d*(1/(s2*s2) - 1/(s1*s1)) + 4*log(s2/s1)))/(32*a*sqrt(a))
        } else if a != 0 {
            return (abs(2*a*t + b)*(2*a*t + b) - abs(b)*b)/(8*a*sqrt(a))
        } else {
            return sqrt(c)*t
        }
    }
    func t(withLength length: CGFloat) -> CGFloat {
        let minRange = 0.000001.cf, maxCount = 100
        var minT = 0.cf, maxT = 1.cf
        for _ in 0 ..< maxCount {
            let t = (minT + maxT)/2
            let l = self.length(withT: t)
            if l < length {
                minT = t
            } else {
                maxT = t
            }
            if maxT - minT < minRange {
                return (minT + maxT)/2
            }
        }
        return (minT + maxT)/2
    }
}
