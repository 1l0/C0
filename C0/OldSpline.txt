//Cut    
func update(withTime time: Int) {
        let timeResult = keyIndex(time)
        let i1 = timeResult.index, interTime = max(0, timeResult.interValue)
        let ki1 = keyframeIndexes[i1].index
        editKeyframeIndex = ki1
        let keyframe = keyframes[ki1]
        guard interTime != 0 && timeResult.sectionValue != 0 && i1 + 1 < keyframeIndexes.count && keyframe.interpolation != .none else {
            step(ki1)
            return
        }
        let ki2 = keyframeIndexes[i1 + 1].index
        let t = keyframe.easing.convertT(interTime.cf/timeResult.sectionValue.cf)
        if keyframe.interpolation == .linear || keyframes.count <= 2 {
            linear(ki1, ki2, t: t)
        } else {
            let isUseFirstIndex = i1 - 1 >= 0 && keyframe.interpolation != .bound, isUseEndIndex = i1 + 2 < keyframeIndexes.count && keyframes[ki2].interpolation != .bound
            if isUseFirstIndex {
                if isUseEndIndex {
                    spline(keyframeIndexes[i1 - 1].index, ki1, ki2, keyframeIndexes[i1 + 2].index, t: t)
                } else {
                    endSpline(keyframeIndexes[i1 - 1].index, ki1, ki2, t: t)
                }
            } else if isUseEndIndex {
                firstSpline(ki1, ki2, keyframeIndexes[i1 + 2].index, t: t)
            } else {
                linear(ki1, ki2, t: t)
            }
        }
    }

func firstSpline(_ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        drawingItem.update(with: f1)
        for cellItem in cellItems {
            cellItem.firstSpline(f1, f2, f3, t: t)
        }
        transformItem?.firstSpline(f1, f2, f3, t: t)
        textItem?.update(with: f1)
    }
    func spline(_ f0: Int, _ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        drawingItem.update(with: f1)
        for cellItem in cellItems {
            cellItem.spline(f0, f1, f2, f3, t: t)
        }
        transformItem?.spline(f0, f1, f2, f3, t: t)
        textItem?.update(with: f1)
    }
    func endSpline(_ f0: Int, _ f1: Int, _ f2: Int, t: CGFloat) {
        drawingItem.update(with: f1)
        for cellItem in cellItems {
            cellItem.endSpline(f0, f1, f2, t: t)
        }
        transformItem?.endSpline(f0, f1, f2, t: t)
        textItem?.update(with: f1)
    }




final class DrawingItem: NSObject, NSCoding, Copying {
    func firstSpline(_ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        drawing = keyDrawings[f1]
    }
func spline(_ f0: Int, _ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        drawing = keyDrawings[f1]
    }
    func endSpline(_ f0: Int, _ f1: Int, _ f2: Int, t: CGFloat) {
        drawing = keyDrawings[f1]
    }
}

final class CellItem: NSObject, NSCoding, Copying {
    func firstSpline(_ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        if !keyMaterials.isEmpty {
            cell.material = Material.firstSpline(keyMaterials[f1], keyMaterials[f2], keyMaterials[f3], t: t)
        }
        cell.geometry = Geometry.firstSpline(keyGeometries[f1], keyGeometries[f2], keyGeometries[f3], t: t)
    }
 func spline(_ f0: Int, _ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        if !keyMaterials.isEmpty {
            cell.material = Material.spline(keyMaterials[f0], keyMaterials[f1], keyMaterials[f2], keyMaterials[f3], t: t)
        }
        cell.geometry = Geometry.spline(keyGeometries[f0], keyGeometries[f1], keyGeometries[f2], keyGeometries[f3], t: t)
    }
    func endSpline(_ f0: Int, _ f1: Int, _ f2: Int, t: CGFloat) {
        if !keyMaterials.isEmpty {
            cell.material = Material.endSpline(keyMaterials[f0], keyMaterials[f1], keyMaterials[f2], t: t)
        }
        cell.geometry = Geometry.endSpline(keyGeometries[f0], keyGeometries[f1], keyGeometries[f2], t: t)
    }
    

final class TransformItem: NSObject, NSCoding, Copying {
    func firstSpline(_ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        transform = Transform.firstSpline(keyTransforms[f1], keyTransforms[f2], keyTransforms[f3], t: t)
    }
func spline(_ f0: Int, _ f1: Int, _ f2: Int, _ f3: Int, t: CGFloat) {
        transform = Transform.spline(keyTransforms[f0], keyTransforms[f1], keyTransforms[f2], keyTransforms[f3], t: t)
    }
    func endSpline(_ f0: Int, _ f1: Int, _ f2: Int, t: CGFloat) {
        transform = Transform.endSpline(keyTransforms[f0], keyTransforms[f1], keyTransforms[f2], t: t)
    }
}


//Transform
static func spline(_ f0: Transform, _ f1: Transform, _ f2: Transform, _ f3: Transform, t: CGFloat) -> Transform {
        let newPosition = CGPoint.spline(f0.position, f1.position, f2.position, f3.position, t: t)
        let newScaleX = CGFloat.spline(f0.scale.width, f1.scale.width, f2.scale.width, f3.scale.width, t: t)
        let newScaleY = CGFloat.spline(f0.scale.height, f1.scale.height, f2.scale.height, f3.scale.height, t: t)
        let newRotation = CGFloat.spline(f0.rotation, f1.rotation, f2.rotation, f3.rotation, t: t)
        let newWiggle = Wiggle.spline(f0.wiggle, f1.wiggle, f2.wiggle, f3.wiggle, t: t)
        return Transform(position: newPosition, scale: CGSize(width: newScaleX, height: newScaleY), rotation: newRotation, wiggle: newWiggle)
    }
    static func firstSpline(_ f1: Transform, _ f2: Transform, _ f3: Transform, t: CGFloat) -> Transform {
        let newPosition = CGPoint.firstSpline(f1.position, f2.position, f3.position, t: t)
        let newScaleX = CGFloat.firstSpline(f1.scale.width, f2.scale.width, f3.scale.width, t: t)
        let newScaleY = CGFloat.firstSpline(f1.scale.height, f2.scale.height, f3.scale.height, t: t)
        let newRotation = CGFloat.firstSpline(f1.rotation, f2.rotation, f3.rotation, t: t)
        let newWiggle = Wiggle.firstSpline(f1.wiggle, f2.wiggle, f3.wiggle, t: t)
        return Transform(position: newPosition, scale: CGSize(width: newScaleX, height: newScaleY), rotation: newRotation, wiggle: newWiggle)
    }
    static func endSpline(_ f0: Transform, _ f1: Transform, _ f2: Transform, t: CGFloat) -> Transform {
        let newPosition = CGPoint.endSpline(f0.position, f1.position, f2.position, t: t)
        let newScaleX = CGFloat.endSpline(f0.scale.width, f1.scale.width, f2.scale.width, t: t)
        let newScaleY = CGFloat.endSpline(f0.scale.height, f1.scale.height, f2.scale.height, t: t)
        let newRotation = CGFloat.endSpline(f0.rotation, f1.rotation, f2.rotation, t: t)
        let newWiggle = Wiggle.endSpline(f0.wiggle, f1.wiggle, f2.wiggle, t: t)
        return Transform(position: newPosition, scale: CGSize(width: newScaleX, height: newScaleY), rotation: newRotation, wiggle: newWiggle)
    }

    
//Wiggle
static func spline(_ f0: Wiggle, _ f1: Wiggle, _ f2: Wiggle, _ f3: Wiggle, t: CGFloat) -> Wiggle {
        let newMaxWidth = max(0, CGFloat.spline(f0.maxSize.width, f1.maxSize.width, f2.maxSize.width, f3.maxSize.width, t: t))
        let newMaxHeight = max(0, CGFloat.spline(f0.maxSize.height, f1.maxSize.height, f2.maxSize.height, f3.maxSize.height, t: t))
        let newHz = max(0, CGFloat.spline(f0.hz, f1.hz, f2.hz, f3.hz, t: t))
        return Wiggle(maxSize: CGSize(width: newMaxWidth, height: newMaxHeight), hz: newHz)
    }
    static func firstSpline(_ f1: Wiggle, _ f2: Wiggle, _ f3: Wiggle, t: CGFloat) -> Wiggle {
        let newMaxWidth = max(0, CGFloat.firstSpline(f1.maxSize.width, f2.maxSize.width, f3.maxSize.width, t: t))
        let newMaxHeight = max(0, CGFloat.firstSpline(f1.maxSize.height, f2.maxSize.height, f3.maxSize.height, t: t))
        let newHz = max(0, CGFloat.firstSpline(f1.hz, f2.hz, f3.hz, t: t))
        return Wiggle(maxSize: CGSize(width: newMaxWidth, height: newMaxHeight), hz: newHz)
    }
    static func endSpline(_ f0: Wiggle, _ f1: Wiggle, _ f2: Wiggle, t: CGFloat) -> Wiggle {
        let newMaxWidth = max(0, CGFloat.endSpline(f0.maxSize.width, f1.maxSize.width, f2.maxSize.width, t: t))
        let newMaxHeight = max(0, CGFloat.endSpline(f0.maxSize.height, f1.maxSize.height, f2.maxSize.height, t: t))
        let newHz = max(0, CGFloat.endSpline(f0.hz, f1.hz, f2.hz, t: t))
        return Wiggle(maxSize: CGSize(width: newMaxWidth, height: newMaxHeight), hz: newHz)
    }

    
//Text
 static func spline(_ f0: Text, _ f1: Text, _ f2: Text, _ f3: Text, t: CGFloat) -> Text {
        return f1
    }
    static func firstSpline(_ f1: Text, _ f2: Text, _ f3: Text, t: CGFloat) -> Text {
        return f1
    }
    static func endSpline(_ f0: Text, _ f1: Text, _ f2: Text, t: CGFloat) -> Text {
        return f1
    }


//Geometry
 static func spline(_ f0: Geometry, _ f1: Geometry, _ f2: Geometry, _ f3: Geometry, t: CGFloat) -> Geometry {
        if f1 === f2 {
            return f1
        } else if f1.lines.isEmpty {
            return Geometry()
        } else {
            return Geometry(lines: f1.lines.enumerated().map { i, l1 in
                if i >= f2.lines.count {
                    return l1
                } else {
                    let l2 = f2.lines[i]
                    return Line.spline(i >= f0.lines.count ? l1 : f0.lines[i], l1, l2, i >= f3.lines.count ? l2 : f3.lines[i], t: t)
                }
            })
        }
    }
    static func firstSpline(_ f1: Geometry, _ f2: Geometry, _ f3: Geometry, t: CGFloat) -> Geometry {
        if f1 === f2 {
            return f1
        } else if f1.lines.isEmpty {
            return Geometry()
        } else {
            return Geometry(lines: f1.lines.enumerated().map { i, l1 in
                if i >= f2.lines.count {
                    return l1
                } else {
                    let l2 = f2.lines[i]
                    return Line.firstSpline(l1, l2, i >= f3.lines.count ? l2 : f3.lines[i], t: t)
                }
            })
        }
    }
    static func endSpline(_ f0: Geometry, _ f1: Geometry, _ f2: Geometry, t: CGFloat) -> Geometry {
        if f1 === f2 {
            return f1
        } else if f1.lines.isEmpty {
            return Geometry()
        } else {
            return Geometry(lines: f1.lines.enumerated().map { i, l1 in
                if i >= f2.lines.count {
                    return l1
                } else {
                    return Line.endSpline(i >= f0.lines.count ? l1 : f0.lines[i], l1, f2.lines[i], t: t)
                }
            })
        }
    }

    
//Material
static func spline(_ f0: Material, _ f1: Material, _ f2: Material, _ f3: Material, t: CGFloat) -> Material {
        let color = HSLColor.spline(f0.color, f1.color, f2.color, f3.color, t: t)
        let type = f1.type
        let lineWidth = max(CGFloat.spline(f0.lineWidth, f1.lineWidth, f2.lineWidth, f3.lineWidth, t: t), 0)
        let lineStrength = CGFloat.spline(f0.lineStrength, f1.lineStrength, f2.lineStrength, f3.lineStrength, t: t).clip(min: 0, max: 1)
        let opacity = CGFloat.spline(f0.opacity, f1.opacity, f2.opacity, f3.opacity, t: t).clip(min: 0, max: 1)
        return Material(color: color, type: type, lineWidth: lineWidth, lineStrength: lineStrength, opacity: opacity)
    }
    static func firstSpline(_ f1: Material, _ f2: Material, _ f3: Material, t: CGFloat) -> Material {
        let color = HSLColor.firstSpline(f1.color, f2.color, f3.color, t: t)
        let type = f1.type
        let lineWidth = max(CGFloat.firstSpline(f1.lineWidth, f2.lineWidth, f3.lineWidth, t: t), 0)
        let lineStrength = CGFloat.firstSpline(f1.lineStrength, f2.lineStrength, f3.lineStrength, t: t).clip(min: 0, max: 1)
        let opacity = CGFloat.firstSpline(f1.opacity, f2.opacity, f3.opacity, t: t).clip(min: 0, max: 1)
        return Material(color: color, type: type, lineWidth: lineWidth, lineStrength: lineStrength, opacity: opacity)
    }
    static func endSpline(_ f0: Material, _ f1: Material, _ f2: Material, t: CGFloat) -> Material {
        let color = HSLColor.endSpline(f0.color, f1.color, f2.color, t: t)
        let type = f1.type
        let lineWidth = max(CGFloat.endSpline(f0.lineWidth, f1.lineWidth, f2.lineWidth, t: t), 0)
        let lineStrength = CGFloat.endSpline(f0.lineStrength, f1.lineStrength, f2.lineStrength, t: t).clip(min: 0, max: 1)
        let opacity = CGFloat.endSpline(f0.opacity, f1.opacity, f2.opacity, t: t).clip(min: 0, max: 1)
        return Material(color: color, type: type, lineWidth: lineWidth, lineStrength: lineStrength, opacity: opacity)
    }


//HSLColor
 static func spline(_ f0: HSLColor, _ f1: HSLColor, _ f2: HSLColor, _ f3: HSLColor, t: CGFloat) -> HSLColor {
        let hue = CGFloat.spline(f0.hue, f1.hue.loopValue(other: f0.hue), f2.hue.loopValue(other: f0.hue), f3.hue.loopValue(other: f0.hue), t: t).loopValue()
        let saturation = CGFloat.spline(f0.saturation, f1.saturation, f2.saturation, f3.saturation, t: t).clip(min: 0, max: 1)
        let lightness = CGFloat.spline(f0.lightness, f1.lightness, f2.lightness, f3.lightness, t: t).clip(min: 0, max: 1)
        return HSLColor(hue: hue, saturation: saturation, lightness: lightness)
    }
    static func firstSpline(_ f1: HSLColor, _ f2: HSLColor, _ f3: HSLColor, t: CGFloat) -> HSLColor {
        let hue = CGFloat.firstSpline(f1.hue, f2.hue.loopValue(other: f1.hue), f3.hue.loopValue(other: f1.hue), t: t).loopValue()
        let saturation = CGFloat.firstSpline(f1.saturation, f2.saturation, f3.saturation, t: t).clip(min: 0, max: 1)
        let lightness = CGFloat.firstSpline(f1.lightness, f2.lightness, f3.lightness, t: t).clip(min: 0, max: 1)
        return HSLColor(hue: hue, saturation: saturation, lightness: lightness)
    }
    static func endSpline(_ f0: HSLColor, _ f1: HSLColor, _ f2: HSLColor, t: CGFloat) -> HSLColor {
        let hue = CGFloat.endSpline(f0.hue, f1.hue.loopValue(other: f0.hue), f2.hue.loopValue(other: f0.hue), t: t).loopValue()
        let saturation = CGFloat.endSpline(f0.saturation, f1.saturation, f2.saturation, t: t).clip(min: 0, max: 1)
        let lightness = CGFloat.endSpline(f0.lightness, f1.lightness, f2.lightness, t: t).clip(min: 0, max: 1)
        return HSLColor(hue: hue, saturation: saturation, lightness: lightness)
    }


//Line
static func spline(_ f0: Line, _ f1: Line, _ f2: Line, _ f3: Line, t: CGFloat) -> Line {
        let count = max(f0.points.count, f1.points.count, f2.points.count, f3.points.count)
        let points: [CGPoint] = (0 ..< count).map { i in
            let f0i = f0.point(at: i, maxCount: count), f1i = f1.point(at: i, maxCount: count), f2i = f2.point(at: i, maxCount: count), f3i = f3.point(at: i, maxCount: count)
            return f1i == f2i ? f1i : CGPoint.spline(f0i, f1i, f2i, f3i, t: t)
        }
        return Line(points: points, pressures: f1.pressures)
    }
    static func firstSpline(_ f1: Line, _ f2: Line, _ f3: Line, t: CGFloat) -> Line {
        let count = max(f1.points.count, f2.points.count, f3.points.count)
        let points: [CGPoint] = (0 ..< count).map { i in
            let f1i = f1.point(at: i, maxCount: count), f2i = f2.point(at: i, maxCount: count), f3i = f3.point(at: i, maxCount: count)
            return f1i == f2i ? f1i : CGPoint.firstSpline(f1i, f2i, f3i, t: t)
        }
        return Line(points: points, pressures: f1.pressures)
    }
    static func endSpline(_ f0: Line, _ f1: Line, _ f2: Line, t: CGFloat) -> Line {
        let count = max(f0.points.count, f1.points.count, f2.points.count)
        let points: [CGPoint] = (0 ..< count).map { i in
            let f0i = f0.point(at: i, maxCount: count), f1i = f1.point(at: i, maxCount: count), f2i = f2.point(at: i, maxCount: count)
            return f1i == f2i ? f1i : CGPoint.endSpline(f0i, f1i, f2i, t: t)
        }
        return Line(points: points, pressures: f1.pressures)
    }


protocol Interpolatable {
    static func linear(_ f0: Self, _ f1: Self, t: CGFloat) -> Self
    static func spline(_ f0: Self, _ f1: Self, _ f2: Self, _ f3: Self, t: CGFloat) -> Self
    static func firstSpline(_ f1: Self, _ f2: Self, _ f3: Self, t: CGFloat) -> Self
    static func endSpline(_ f0: Self, _ f1: Self, _ f2: Self, t: CGFloat) -> Self
}

    
//CGFloat
    static func spline(_ f0: CGFloat, _ f1: CGFloat, _ f2: CGFloat, _ f3: CGFloat, t: CGFloat) -> CGFloat {
        return ((-f0 + 3*f1 - 3*f2 + f3)*t*t*t + (2*f0 - 5*f1 + 4*f2 - f3)*t*t + (-f0 + f2)*t)*0.5 + f1
    }
    static func firstSpline(_ f1: CGFloat, _ f2: CGFloat, _ f3: CGFloat, t: CGFloat) -> CGFloat {
        return 0.5*(f1 - 2*f2 + f3)*t*t + 0.5*(-3*f1 + 4*f2 - f3)*t + f1
    }
    static func endSpline(_ f0: CGFloat, _ f1: CGFloat, _ f2: CGFloat, t: CGFloat) -> CGFloat {
        return 0.5*(f0 - 2*f1 + f2)*t*t + 0.5*(-f0 + f2)*t + f1
    }
}
extension CGPoint: Interpolatable {
    static func spline(_ f0: CGPoint, _ f1: CGPoint, _ f2: CGPoint, _ f3: CGPoint, t: CGFloat) -> CGPoint {
        return CGPoint(x: CGFloat.spline(f0.x, f1.x, f2.x, f3.x, t: t), y: CGFloat.spline(f0.y, f1.y, f2.y, f3.y, t: t))
    }
    static func firstSpline(_ f1: CGPoint, _ f2: CGPoint, _ f3: CGPoint, t: CGFloat) -> CGPoint {
        return CGPoint(x: CGFloat.firstSpline(f1.x, f2.x, f3.x, t: t), y: CGFloat.firstSpline(f1.y, f2.y, f3.y, t: t))
    }
    static func endSpline(_ f0: CGPoint, _ f1: CGPoint, _ f2: CGPoint, t: CGFloat) -> CGPoint {
        return CGPoint(x: CGFloat.endSpline(f0.x, f1.x, f2.x, t: t), y: CGFloat.endSpline(f0.y, f1.y, f2.y, t: t))
    }
