 func splited(startIndex: Int, startT st: CGFloat, endIndex: Int, endT et: CGFloat) -> Line {
    var lps = Array(points[startIndex - 1 ..< endIndex])
    if st > 0 {
        lps.insert(FloatPoint(bezier(at: startIndex).tPosition(st)), atIndex: 0)
    }
    if et == 1 && endIndex == count - 1 {
        lps.append(points[endIndex])
    } else if et > 0 {
        lps.append(FloatPoint(bezier(at: endIndex).tPosition(et)))
    }
    if let oprs = pressures {
        var prs = Array(pressures![startIndex - 1 ..< endIndex])
        if st > 0 {
            prs.insert(pressure(at: startIndex, t: st), atIndex: 0)
        }
        if et == 1 && endIndex == count - 1 {
            prs.append(oprs[endIndex])
        } else if et > 0 {
            prs.append(pressure(at: endIndex, t: et))
        }
        return Line(points: lps, pressures: prs, startT: 0, endT: 1)
    } else {
        return Line(points: lps, pressures: nil, startT: 0, endT: 1)
    }
 }
 
 private func addSplinePoints(_ ps: [PressurePoint], in ctx: CGContext) {
    var op = ps[0].leftPoint
    ctx.move(to: op)
    op = ps[1].leftPoint//FloatPoint.linear(f0: lp1, f1: flp2, t: startT)
    if ps.count > 3 {
        for i in 2 ..< ps.count - 1 {
            let p = ps[i].leftPoint
            ctx.addQuadCurve(to: op.mid(p), control: op)
            op = p
        }
        let lp = ps[ps.count - 1]
        ctx.addQuadCurve(to: lp.leftPoint, control: op)
        ctx.addLine(to: lp.rightPoint)
        op = ps[ps.count - 2].rightPoint//FloatPoint.linear(f0: lp0, f1: lp1, t: endT)
        for i in (1...ps.count - 3).reversed() {
            let p = ps[i].rightPoint
            ctx.addQuadCurve(to: op.mid(p), control: op)
            op = p
        }
    } else {
        let lp = ps[ps.count - 1]
        ctx.addQuadCurve(to: lp.leftPoint, control: op)
        ctx.addLine(to: lp.rightPoint)
        op = ps[1].rightPoint
    }
    ctx.addQuadCurve(to: ps[0].rightPoint, control: op)
 }
